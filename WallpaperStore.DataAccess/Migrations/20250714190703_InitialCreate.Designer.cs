// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WallpaperStore.DataAccess;

#nullable disable

namespace WallpaperStore.DataAccess.Migrations
{
    [DbContext(typeof(WallpaperStoreDbContext))]
    [Migration("20250714190703_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WallpaperStore.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsPublicProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastTimeOnline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WallpaperStore.DataAccess.Entities.UserSavedWallpapersEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WallpaperId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFavorite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "WallpaperId");

                    b.HasIndex("WallpaperId");

                    b.ToTable("UserSavedWallpapers", (string)null);
                });

            modelBuilder.Entity("WallpaperStore.DataAccess.Entities.WallpaperEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Wallpapers");
                });

            modelBuilder.Entity("WallpaperStore.DataAccess.Entities.UserSavedWallpapersEntity", b =>
                {
                    b.HasOne("WallpaperStore.DataAccess.Entities.UserEntity", "UserEntity")
                        .WithMany("SavedWallpapers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WallpaperStore.DataAccess.Entities.WallpaperEntity", "WallpaperEntity")
                        .WithMany()
                        .HasForeignKey("WallpaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");

                    b.Navigation("WallpaperEntity");
                });

            modelBuilder.Entity("WallpaperStore.DataAccess.Entities.WallpaperEntity", b =>
                {
                    b.HasOne("WallpaperStore.DataAccess.Entities.UserEntity", "Owner")
                        .WithMany("AddedWallpapers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WallpaperStore.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("AddedWallpapers");

                    b.Navigation("SavedWallpapers");
                });
#pragma warning restore 612, 618
        }
    }
}
